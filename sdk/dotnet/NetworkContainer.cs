// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// `mongodbatlas..NetworkContainer` provides a Network Peering Container resource. The resource lets you create, edit and delete network peering containers. The resource requires your Project ID.
    /// 
    /// &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
    /// 
    /// The following table outlines the maximum number of Network Peering containers per cloud provider:
    /// * Cloud Provider:  GCP - Container Limit: One container per project.
    /// * Cloud Provider:  AWS and Azure - Container Limit: One container per cloud provider region.
    /// 
    /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
    /// </summary>
    public partial class NetworkContainer : Pulumi.CustomResource
    {
        /// <summary>
        /// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
        /// </summary>
        [Output("atlasCidrBlock")]
        public Output<string> AtlasCidrBlock { get; private set; } = null!;

        /// <summary>
        /// Unique identifer of the Azure subscription in which the VNet resides.
        /// </summary>
        [Output("azureSubscriptionId")]
        public Output<string> AzureSubscriptionId { get; private set; } = null!;

        /// <summary>
        /// The Network Peering Container ID.
        /// </summary>
        [Output("containerId")]
        public Output<string> ContainerId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the GCP project in which the Network Peering connection resides.
        /// </summary>
        [Output("gcpProjectId")]
        public Output<string> GcpProjectId { get; private set; } = null!;

        /// <summary>
        /// Name of the Network Peering connection in the Atlas project.
        /// </summary>
        [Output("networkName")]
        public Output<string> NetworkName { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
        /// </summary>
        [Output("providerName")]
        public Output<string?> ProviderName { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the project has Network Peering connections deployed in the container.
        /// </summary>
        [Output("provisioned")]
        public Output<bool> Provisioned { get; private set; } = null!;

        /// <summary>
        /// The Atlas Azure region name for where this container will exist.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The Atlas AWS region name for where this container will exist.
        /// </summary>
        [Output("regionName")]
        public Output<string> RegionName { get; private set; } = null!;

        /// <summary>
        /// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
        /// </summary>
        [Output("vnetName")]
        public Output<string> VnetName { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the projectâ€™s VPC.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkContainer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkContainer(string name, NetworkContainerArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/networkContainer:NetworkContainer", name, args ?? new NetworkContainerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkContainer(string name, Input<string> id, NetworkContainerState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/networkContainer:NetworkContainer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkContainer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkContainer Get(string name, Input<string> id, NetworkContainerState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkContainer(name, id, state, options);
        }
    }

    public sealed class NetworkContainerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
        /// </summary>
        [Input("atlasCidrBlock", required: true)]
        public Input<string> AtlasCidrBlock { get; set; } = null!;

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        /// <summary>
        /// The Atlas Azure region name for where this container will exist.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The Atlas AWS region name for where this container will exist.
        /// </summary>
        [Input("regionName")]
        public Input<string>? RegionName { get; set; }

        public NetworkContainerArgs()
        {
        }
    }

    public sealed class NetworkContainerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
        /// </summary>
        [Input("atlasCidrBlock")]
        public Input<string>? AtlasCidrBlock { get; set; }

        /// <summary>
        /// Unique identifer of the Azure subscription in which the VNet resides.
        /// </summary>
        [Input("azureSubscriptionId")]
        public Input<string>? AzureSubscriptionId { get; set; }

        /// <summary>
        /// The Network Peering Container ID.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        /// <summary>
        /// Unique identifier of the GCP project in which the Network Peering connection resides.
        /// </summary>
        [Input("gcpProjectId")]
        public Input<string>? GcpProjectId { get; set; }

        /// <summary>
        /// Name of the Network Peering connection in the Atlas project.
        /// </summary>
        [Input("networkName")]
        public Input<string>? NetworkName { get; set; }

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        /// <summary>
        /// Indicates whether the project has Network Peering connections deployed in the container.
        /// </summary>
        [Input("provisioned")]
        public Input<bool>? Provisioned { get; set; }

        /// <summary>
        /// The Atlas Azure region name for where this container will exist.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The Atlas AWS region name for where this container will exist.
        /// </summary>
        [Input("regionName")]
        public Input<string>? RegionName { get; set; }

        /// <summary>
        /// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
        /// </summary>
        [Input("vnetName")]
        public Input<string>? VnetName { get; set; }

        /// <summary>
        /// Unique identifier of the projectâ€™s VPC.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public NetworkContainerState()
        {
        }
    }
}
