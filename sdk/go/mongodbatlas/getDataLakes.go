// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getDataLakes` describe all Data Lakes.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.GetDataLakes(ctx, &mongodbatlas.GetDataLakesArgs{
// 			ProjectId: "PROJECT ID",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetDataLakes(ctx *pulumi.Context, args *GetDataLakesArgs, opts ...pulumi.InvokeOption) (*GetDataLakesResult, error) {
	var rv GetDataLakesResult
	err := ctx.Invoke("mongodbatlas:index/getDataLakes:getDataLakes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataLakes.
type GetDataLakesArgs struct {
	// The unique ID for the project to get all data lakes.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getDataLakes.
type GetDataLakesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// A list where each represents a Data lake.
	Results []GetDataLakesResultType `pulumi:"results"`
}
