// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testMongodbatlasAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThreshold: {
 *         metric_name: "ASSERT_REGULAR",
 *         mode: "AVERAGE",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *     },
 *     notifications: [{
 *         delayMin: 0,
 *         emailEnabled: true,
 *         intervalMin: 5,
 *         smsEnabled: false,
 *         typeName: "GROUP",
 *     }],
 *     projectId: "<PROJECT-ID>",
 * });
 * const testAlertConfiguration = pulumi.all([testMongodbatlasAlertConfiguration.alertConfigurationId, testMongodbatlasAlertConfiguration.projectId]).apply(([alertConfigurationId, projectId]) => mongodbatlas.getAlertConfiguration({
 *     alertConfigurationId: alertConfigurationId,
 *     projectId: projectId,
 * }, { async: true }));
 * ```
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testMongodbatlasAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     notifications: [{
 *         delayMin: 0,
 *         emailEnabled: true,
 *         intervalMin: 5,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *         smsEnabled: false,
 *         typeName: "GROUP",
 *     }],
 *     projectId: "<PROJECT-ID>",
 *     threshold: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * const testAlertConfiguration = pulumi.all([testMongodbatlasAlertConfiguration.alertConfigurationId, testMongodbatlasAlertConfiguration.projectId]).apply(([alertConfigurationId, projectId]) => mongodbatlas.getAlertConfiguration({
 *     alertConfigurationId: alertConfigurationId,
 *     projectId: projectId,
 * }, { async: true }));
 * ```
 */
export function getAlertConfiguration(args: GetAlertConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetAlertConfigurationResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", {
        "alertConfigurationId": args.alertConfigurationId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlertConfiguration.
 */
export interface GetAlertConfigurationArgs {
    /**
     * Unique identifier for the alert configuration.
     */
    readonly alertConfigurationId: string;
    /**
     * The ID of the project where the alert configuration will create.
     */
    readonly projectId: string;
}

/**
 * A collection of values returned by getAlertConfiguration.
 */
export interface GetAlertConfigurationResult {
    readonly alertConfigurationId: string;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    readonly created: string;
    /**
     * If set to true, the alert configuration is enabled. If enabled is not exported it is set to false.
     */
    readonly enabled: boolean;
    /**
     * The type of event that will trigger an alert.
     */
    readonly eventType: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly matchers: outputs.GetAlertConfigurationMatcher[];
    readonly metricThreshold: outputs.GetAlertConfigurationMetricThreshold;
    readonly notifications: outputs.GetAlertConfigurationNotification[];
    readonly projectId: string;
    /**
     * Threshold value outside of which an alert will be triggered.
     */
    readonly threshold: outputs.GetAlertConfigurationThreshold;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    readonly updated: string;
}
