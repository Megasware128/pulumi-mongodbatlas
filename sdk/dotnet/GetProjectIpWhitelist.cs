// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetProjectIpWhitelist
    {
        /// <summary>
        /// `mongodbatlas.ProjectIpWhitelist` describes an IP Whitelist entry resource. The whitelist grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// &gt; **IMPORTANT:**
        /// When you remove an entry from the whitelist, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.   
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectIpWhitelistResult> InvokeAsync(GetProjectIpWhitelistArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectIpWhitelistResult>("mongodbatlas:index/getProjectIpWhitelist:getProjectIpWhitelist", args ?? new GetProjectIpWhitelistArgs(), options.WithVersion());
    }


    public sealed class GetProjectIpWhitelistArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the whitelisted AWS security group. Mutually exclusive with `cidr_block` and `ip_address`.
        /// </summary>
        [Input("awsSecurityGroup")]
        public string? AwsSecurityGroup { get; set; }

        /// <summary>
        /// Whitelist entry in Classless Inter-Domain Routing (CIDR) notation. Mutually exclusive with `aws_security_group` and `ip_address`.
        /// </summary>
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        /// <summary>
        /// Whitelisted IP address. Mutually exclusive with `aws_security_group` and `cidr_block`.
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        /// <summary>
        /// The ID of the project in which to add the whitelist entry.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetProjectIpWhitelistArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectIpWhitelistResult
    {
        public readonly string AwsSecurityGroup;
        public readonly string CidrBlock;
        /// <summary>
        /// Comment to add to the whitelist entry.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpAddress;
        public readonly string ProjectId;

        [OutputConstructor]
        private GetProjectIpWhitelistResult(
            string awsSecurityGroup,

            string cidrBlock,

            string comment,

            string id,

            string ipAddress,

            string projectId)
        {
            AwsSecurityGroup = awsSecurityGroup;
            CidrBlock = cidrBlock;
            Comment = comment;
            Id = id;
            IpAddress = ipAddress;
            ProjectId = projectId;
        }
    }
}
