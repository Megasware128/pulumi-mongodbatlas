// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `.NetworkContainer` provides a Network Peering Container resource. The resource lets you create, edit and delete network peering containers. The resource requires your Project ID.
//
// > **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
//
// The following table outlines the maximum number of Network Peering containers per cloud provider:
// * Cloud Provider:  GCP - Container Limit: One container per project.
// * Cloud Provider:  AWS and Azure - Container Limit: One container per cloud provider region.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
type NetworkContainer struct {
	pulumi.CustomResourceState

	// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
	AtlasCidrBlock pulumi.StringOutput `pulumi:"atlasCidrBlock"`
	// Unique identifer of the Azure subscription in which the VNet resides.
	AzureSubscriptionId pulumi.StringOutput `pulumi:"azureSubscriptionId"`
	// The Network Peering Container ID.
	ContainerId pulumi.StringOutput `pulumi:"containerId"`
	// Unique identifier of the GCP project in which the Network Peering connection resides.
	GcpProjectId pulumi.StringOutput `pulumi:"gcpProjectId"`
	// Name of the Network Peering connection in the Atlas project.
	NetworkName pulumi.StringOutput `pulumi:"networkName"`
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
	ProviderName pulumi.StringPtrOutput `pulumi:"providerName"`
	// Indicates whether the project has Network Peering connections deployed in the container.
	Provisioned pulumi.BoolOutput `pulumi:"provisioned"`
	// The Atlas Azure region name for where this container will exist.
	Region pulumi.StringOutput `pulumi:"region"`
	// The Atlas AWS region name for where this container will exist.
	RegionName pulumi.StringOutput `pulumi:"regionName"`
	// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
	VnetName pulumi.StringOutput `pulumi:"vnetName"`
	// Unique identifier of the project’s VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNetworkContainer registers a new resource with the given unique name, arguments, and options.
func NewNetworkContainer(ctx *pulumi.Context,
	name string, args *NetworkContainerArgs, opts ...pulumi.ResourceOption) (*NetworkContainer, error) {
	if args == nil || args.AtlasCidrBlock == nil {
		return nil, errors.New("missing required argument 'AtlasCidrBlock'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil {
		args = &NetworkContainerArgs{}
	}
	var resource NetworkContainer
	err := ctx.RegisterResource("mongodbatlas:index/networkContainer:NetworkContainer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkContainer gets an existing NetworkContainer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkContainerState, opts ...pulumi.ResourceOption) (*NetworkContainer, error) {
	var resource NetworkContainer
	err := ctx.ReadResource("mongodbatlas:index/networkContainer:NetworkContainer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkContainer resources.
type networkContainerState struct {
	// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
	AtlasCidrBlock *string `pulumi:"atlasCidrBlock"`
	// Unique identifer of the Azure subscription in which the VNet resides.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// The Network Peering Container ID.
	ContainerId *string `pulumi:"containerId"`
	// Unique identifier of the GCP project in which the Network Peering connection resides.
	GcpProjectId *string `pulumi:"gcpProjectId"`
	// Name of the Network Peering connection in the Atlas project.
	NetworkName *string `pulumi:"networkName"`
	// The unique ID for the project to create the database user.
	ProjectId *string `pulumi:"projectId"`
	// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
	ProviderName *string `pulumi:"providerName"`
	// Indicates whether the project has Network Peering connections deployed in the container.
	Provisioned *bool `pulumi:"provisioned"`
	// The Atlas Azure region name for where this container will exist.
	Region *string `pulumi:"region"`
	// The Atlas AWS region name for where this container will exist.
	RegionName *string `pulumi:"regionName"`
	// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
	VnetName *string `pulumi:"vnetName"`
	// Unique identifier of the project’s VPC.
	VpcId *string `pulumi:"vpcId"`
}

type NetworkContainerState struct {
	// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
	AtlasCidrBlock pulumi.StringPtrInput
	// Unique identifer of the Azure subscription in which the VNet resides.
	AzureSubscriptionId pulumi.StringPtrInput
	// The Network Peering Container ID.
	ContainerId pulumi.StringPtrInput
	// Unique identifier of the GCP project in which the Network Peering connection resides.
	GcpProjectId pulumi.StringPtrInput
	// Name of the Network Peering connection in the Atlas project.
	NetworkName pulumi.StringPtrInput
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringPtrInput
	// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
	ProviderName pulumi.StringPtrInput
	// Indicates whether the project has Network Peering connections deployed in the container.
	Provisioned pulumi.BoolPtrInput
	// The Atlas Azure region name for where this container will exist.
	Region pulumi.StringPtrInput
	// The Atlas AWS region name for where this container will exist.
	RegionName pulumi.StringPtrInput
	// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
	VnetName pulumi.StringPtrInput
	// Unique identifier of the project’s VPC.
	VpcId pulumi.StringPtrInput
}

func (NetworkContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkContainerState)(nil)).Elem()
}

type networkContainerArgs struct {
	// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
	AtlasCidrBlock string `pulumi:"atlasCidrBlock"`
	// The unique ID for the project to create the database user.
	ProjectId string `pulumi:"projectId"`
	// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
	ProviderName *string `pulumi:"providerName"`
	// The Atlas Azure region name for where this container will exist.
	Region *string `pulumi:"region"`
	// The Atlas AWS region name for where this container will exist.
	RegionName *string `pulumi:"regionName"`
}

// The set of arguments for constructing a NetworkContainer resource.
type NetworkContainerArgs struct {
	// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
	AtlasCidrBlock pulumi.StringInput
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringInput
	// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
	ProviderName pulumi.StringPtrInput
	// The Atlas Azure region name for where this container will exist.
	Region pulumi.StringPtrInput
	// The Atlas AWS region name for where this container will exist.
	RegionName pulumi.StringPtrInput
}

func (NetworkContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkContainerArgs)(nil)).Elem()
}
